# IPv6 ICMPv6 Neighbor Solicitation Responder

if (!(MAC_GW && MAC_SRC && IPv6_SRC)) {
    print "Run `interface' command first\n";
    return;
}

use Net::Frame::Layer::IPv6 qw(:consts);
use Net::Frame::Layer::ICMPv6 qw(:consts);
use Net::Frame::Layer::ICMPv6::NeighborAdvertisement;

printf "What MAC address to respond with [%s]? ", MAC_SRC;
my $mac = <STDIN>;
chomp $mac;
print "\n";

if ($mac ne "") {
    if ($mac !~ /^([0-9a-f]{2}:){5}[0-9a-f]{2}$/i) {
        printf "MAC `$mac' invalid, using %s\n", MAC_SRC;
        $mac = undef;
    }
}

$mac = $mac || MAC_SRC;
$macpack = $mac;
$macpack =~ s/://g;

my $STOP = 0;
local $SIG{'INT'} = sub {
    $STOP = 1;
};

while (!$STOP) {

    # Capture Neighbor Solicitation
    my $r = sniff count=>1,filter=>'(ip6[6] == 0x3a) and (ip6[40] == 135)';

    # Verify it's a request, not from us
    if (lc($r->ref->{ETH}->src) ne lc(MAC_SRC)) {

        print "----REQUEST----\n";
        print $r->print . "\n";
    
        my $ether = ETHER(
            src  => $mac,
            dst  => $r->ref->{ETH}->src,
            type => NF_ETH_TYPE_IPv6
        );
        my $ipv6 = IPv6(
            src  => $r->ref->{'ICMPv6::NeighborSolicitation'}->targetAddress,
            dst  => $r->ref->{IPv6}->src,
            nextHeader => NF_IPv6_PROTOCOL_ICMPv6
        );
        my $icmpv6 = ICMPv6(type=>NF_ICMPv6_TYPE_NEIGHBORADVERTISEMENT);
        my $option = Net::Frame::Layer::ICMPv6::Option->new(
            type=>2,
            length=>1,
            value=>pack "H*", $macpack
        );
        my $na = Net::Frame::Layer::ICMPv6::NeighborAdvertisement->new(
            flags         => 7,
            targetAddress => $r->ref->{'ICMPv6::NeighborSolicitation'}->targetAddress,
            payload       => $option->pack
        );

        my $p = packet $ether,$ipv6,$icmpv6,$na;

        print "----REPLY----\n";
        decode $p;

        sendp $p;
    }
}
